<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0056)http://www.codeproject.com/cpp/bitbashing.asp?print=true -->
<HTML><HEAD><TITLE>An introduction to bitwise operators - The Code Project - C++ / MFC</TITLE>
<META http-equiv=Reply-to content=mailto:webmaster@codeproject.com>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<META content=en-US name=MS.LOCALE>
<META content="This article gives a brief overview of C style bitwise operators" 
name=Description>
<META content=kbArticle name=Search.TopicType>
<META content="PJ Arends" name=Author>
<META content="08 May 2002 14:00:00 GMT" name=Search.PublishDate>
<META content="08 May 2002 14:00:00 GMT" name=Search.RevisedDate>
<META 
content="Free source code, , Visual C++, MFC, Windows, Bitwise, Bit nibble OR XOR AND NOT compliment" 
name=keywords>
<META 
content="Article content copyright PJ Arends, 2002, everthing else Copyright © CodeProject, 1999-2006, All Rights Reserved." 
name=Copyright><LINK title="CodeProject Lounge Postings" 
href="http://www.codeproject.com/webservices/LoungeRSS.aspx" 
type=application/rss+xml rel=alternate><LINK 
title="CodeProject Latest articles - All topics" 
href="http://www.codeproject.com/webservices/articlerss.aspx?cat=1" 
type=application/rss+xml rel=alternate><LINK 
title="CodeProject Latest articles - MFC / C++" 
href="http://www.codeproject.com/webservices/articlerss.aspx?cat=2" 
type=application/rss+xml rel=alternate><LINK 
title="CodeProject Latest articles - C#" 
href="http://www.codeproject.com/webservices/articlerss.aspx?cat=3" 
type=application/rss+xml rel=alternate><LINK 
title="CodeProject Latest articles - ASP.NET" 
href="http://www.codeproject.com/webservices/articlerss.aspx?cat=4" 
type=application/rss+xml rel=alternate><LINK 
title="CodeProject Latest articles - .NET" 
href="http://www.codeproject.com/webservices/articlerss.aspx?cat=5" 
type=application/rss+xml rel=alternate><LINK href="/favicon.ico" type=image/ico 
rel=icon><LINK href="/favicon.ico" rel="SHORTCUT ICON"><LINK 
href="An introduction to bitwise operators-Dateien/global.css" type=text/css 
rel=stylesheet>
<META content="MSHTML 6.00.2900.2912" name=GENERATOR></HEAD>
<BODY style="MARGIN: 0px" oncopy="return copyCode();" text=black vLink=navy 
aLink=red link=blue bgColor=white><!-- COPYRIGHT 2006 I/PRO Corporation ALL RIGHTS RESERVED. - Page view auditing -->
<SCRIPT language=JavaScript type=text/javascript>
var LSPT="";
LSPT += "?durl=" + escape(document.URL);
LSPT += "&hostname=" + location.hostname;
LSPT += "&url=" + location.pathname;
LSPT += "&query=" + escape(location.search) + escape(location.hash);
LSPT += "&referrer=" + escape(document.referrer);
LSPT += "&browser=" + escape(navigator.appName);
LSPT += "&version=" + escape(navigator.appVersion);
LSPT += "&os=" + escape(navigator.platform);
LSPT += "&xdomain=codeproject.com";
LSPT += "&custid=codeproject";
</SCRIPT>

<SCRIPT type=text/javascript>
document.write('<img src=http://'+'content.ipro.com/images/pixel.gif'+LSPT+' height="1" width="1" style="position:absolute; top:0px; left:0px">');
</SCRIPT>
<NOSCRIPT><IMG style="LEFT: 0px; POSITION: absolute; TOP: 0px" height=1 src="" 
width=1> </NOSCRIPT><!-- END I/PRO PAGE TAG -->
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD class=HeaderLogo><A href="http://www.codeproject.com/"><IMG height=90 
      alt=Home 
      src="An introduction to bitwise operators-Dateien/codeproject225x90.gif" 
      border=0></A></TD>
    <TD bgColor=#ff9900>&nbsp;</TD></TR>
  <TR>
    <TD colSpan=2>
      <TABLE class=ArticleHeader cellSpacing=0 cellPadding=3 width="100%">
        <TBODY>
        <TR vAlign=top>
          <TD class=smallText style="PADDING-RIGHT: 10px"><A 
            href="http://www.codeproject.com/?cat=1">All Topics</A>, <A 
            href="http://www.codeproject.com/?cat=2">MFC / C++</A> &gt;&gt; <A 
            href="http://www.codeproject.com/cpp/">C++ / MFC</A> &gt;&gt; <A 
            href="http://www.codeproject.com/cpp/#Beginners">Beginners</A> 
            &nbsp;(<SPAN class=SmallText 
            style="FONT-WEIGHT: bold; COLOR: green">Beginner</SPAN>)<BR><A 
            href="http://www.codeproject.com/cpp/bitbashing.asp">http://www.codeproject.com/cpp/bitbashing.asp</A><BR><BR>
            <DIV style="FONT-WEIGHT: bold; FONT-SIZE: 16pt">An introduction to 
            bitwise operators</DIV><B>By <A 
            href="http://www.codeproject.com/script/Articles/list_articles.asp?userid=8817">PJ 
            Arends</A></B>. <BR><BR>
            <DIV style="FONT-SIZE: 12px">This article gives a brief overview of 
            C style bitwise operators</DIV></TD>
          <TD class=smallText style="WIDTH: 200px">C++, C<BR>Windows<BR>Win32, 
            VS<BR>Dev<BR><SPAN style="PADDING-RIGHT: 2ex">Posted</SPAN>: <B>9 
            May 2002</B><BR><SPAN style="PADDING-RIGHT: 3ex">Views</SPAN>: 
            <B>187,368</B> </TD></TR></TD></TR></TD></TR></TBODY></TABLE>
      <TABLE cellSpacing=0 cellPadding=0 border=0>
        <TBODY>
        <TR vAlign=top>
          <TD width="100%">
            <TABLE width="100%">
              <TBODY>
              <TR vAlign=top>
                <TD class=SmallText noWrap></TD>
                <TD noWrap align=right><A name=__top></A>
                  <TABLE>
                    <TBODY>
                    <TR>
                      <TD class=smallText align=right>92 votes for this 
                        article.</TD>
                      <TD>
                        <TABLE cellSpacing=0 cellPadding=0 border=2>
                          <TBODY>
                          <TR>
                            <TD><IMG height=5 
                              src="An introduction to bitwise operators-Dateien/red.gif" 
                              width=20 border=0></TD>
                            <TD><IMG height=5 
                              src="An introduction to bitwise operators-Dateien/red.gif" 
                              width=20 border=0></TD>
                            <TD><IMG height=5 
                              src="An introduction to bitwise operators-Dateien/red.gif" 
                              width=20 border=0></TD>
                            <TD><IMG height=5 
                              src="An introduction to bitwise operators-Dateien/red.gif" 
                              width=20 border=0></TD>
                            <TD><IMG height=5 
                              src="An introduction to bitwise operators-Dateien/red.gif" 
                              width=14 border=0><IMG height=5 
                              src="An introduction to bitwise operators-Dateien/white.gif" 
                              width=6 border=0></TD></TR></TBODY></TABLE></TD></TR>
                    <TR>
                      <TD class=smallText align=right colSpan=2><A 
                        title="Calculated as rating x Log10(# votes)" 
                        href="http://www.codeproject.com/script/articles/top_articles.asp?st=2">Popularity: 
                        9.22</A>. Rating: <B>4.7</B> out of 
                  5.</TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE></TD></TR>
        <TR>
          <TD class=ArticlePane>
            <DIV id=contentdiv><!-- Article Starts -->
            <H2>Introduction</H2>
            <P>I have noticed that some people seem to have problems with 
            bitwise operators, so I decided to write this brief tutorial on how 
            to use them.</P>
            <H2>An Introduction to bits</H2>
            <P>Bits, what are they you may ask?</P>
            <P>Well, simply put, bits are the individual ones and zeros that 
            make up every thing we do with computers. All the data you use is 
            stored in your computer using bits. A BYTE is made up of eight bits, 
            a WORD is two BYTEs, or sixteen bits. And a DWORD is two WORDS, or 
            thirty two bits.</P><PRE> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>1</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>1</SPAN> <SPAN class=cpp-literal>1</SPAN> <SPAN class=cpp-literal>1</SPAN> <SPAN class=cpp-literal>1</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>1</SPAN> <SPAN class=cpp-literal>1</SPAN> <SPAN class=cpp-literal>1</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>1</SPAN> <SPAN class=cpp-literal>1</SPAN> <SPAN class=cpp-literal>1</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>1</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>1</SPAN> <SPAN class=cpp-literal>1</SPAN> <SPAN class=cpp-literal>1</SPAN> <SPAN class=cpp-literal>1</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN>
||              |               |               |              ||
|+- bit <SPAN class=cpp-literal>31</SPAN>      |               |               |       bit <SPAN class=cpp-literal>0</SPAN> -+|
|               |               |               |               |
+-- BYTE <SPAN class=cpp-literal>3</SPAN> -----+--- BYTE <SPAN class=cpp-literal>2</SPAN> ----+--- BYTE <SPAN class=cpp-literal>1</SPAN> ----+-- BYTE <SPAN class=cpp-literal>0</SPAN> -----+
|                               |                               |
+----------- WORD <SPAN class=cpp-literal>1</SPAN> ------------+----------- WORD <SPAN class=cpp-literal>0</SPAN> ------------+
|                                                               |
+--------------------------- DWORD -----------------------------+
</PRE>
            <P>The beauty of having bitwise operators is that you can use a 
            BYTE, WORD or DWORD as a small array or structure. Using bitwise 
            operators you can check or set the values of individual bits or even 
            a group of bits.</P>
            <H2>Hexadecimal numbers and how they relate to bits</H2>
            <P>When working with bits, it is kind of hard to express every 
            number using just ones and zeros, which is known as binary notation. 
            To get around this we use hexadecimal (base 16) numbers.</P>
            <P>As you may or may not know, it takes four bits to cover all the 
            numbers from zero to fifteen, which also happens to be the range of 
            a single digit hexadecimal number. This group of four bits, or half 
            a BYTE, is called a nibble. As there are two nibbles in a BYTE, we 
            can use two hexadecimal digits to show the value of one BYTE.</P><PRE>NIBBLE   HEX VALUE
======   =========
 <SPAN class=cpp-literal>0000</SPAN>        <SPAN class=cpp-literal>0</SPAN>
 <SPAN class=cpp-literal>0001</SPAN>        <SPAN class=cpp-literal>1</SPAN>
 <SPAN class=cpp-literal>0010</SPAN>        <SPAN class=cpp-literal>2</SPAN>
 <SPAN class=cpp-literal>0011</SPAN>        <SPAN class=cpp-literal>3</SPAN>
 <SPAN class=cpp-literal>0100</SPAN>        <SPAN class=cpp-literal>4</SPAN>
 <SPAN class=cpp-literal>0101</SPAN>        <SPAN class=cpp-literal>5</SPAN>
 <SPAN class=cpp-literal>0110</SPAN>        <SPAN class=cpp-literal>6</SPAN>
 <SPAN class=cpp-literal>0111</SPAN>        <SPAN class=cpp-literal>7</SPAN>
 <SPAN class=cpp-literal>1000</SPAN>        <SPAN class=cpp-literal>8</SPAN>
 <SPAN class=cpp-literal>1001</SPAN>        <SPAN class=cpp-literal>9</SPAN>
 <SPAN class=cpp-literal>1010</SPAN>        A
 <SPAN class=cpp-literal>1011</SPAN>        B
 <SPAN class=cpp-literal>1100</SPAN>        C
 <SPAN class=cpp-literal>1101</SPAN>        D
 <SPAN class=cpp-literal>1110</SPAN>        E
 <SPAN class=cpp-literal>1111</SPAN>        F</PRE>
            <P>So if we had one BYTE containing the letter 'r' (ASCII code 114) 
            it would look like this:</P><PRE><SPAN class=cpp-literal>0111</SPAN> <SPAN class=cpp-literal>0010</SPAN>    binary
  <SPAN class=cpp-literal>7</SPAN>    <SPAN class=cpp-literal>2</SPAN>     hexadecimal</PRE>
            <P>We could write it as '0x72'</P>
            <H2>Bitwise operators</H2>
            <P>There are six bitwise operators. They 
            are:<BR>&nbsp;&nbsp;&nbsp;&amp;&nbsp;&nbsp;&nbsp;The AND 
            operator<BR>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;The OR 
            operator<BR>&nbsp;&nbsp;&nbsp;^&nbsp;&nbsp;&nbsp;The XOR 
            operator<BR>&nbsp;&nbsp;&nbsp;~&nbsp;&nbsp;&nbsp;The Ones Complement 
            or Inversion operator<BR>&nbsp;&nbsp;&gt;&gt;&nbsp;&nbsp;&nbsp;The 
            Right Shift operator<BR>&nbsp;&nbsp;&lt;&lt;&nbsp;&nbsp;&nbsp;The 
            Left Shift operator.</P>
            <H3>The &amp; operator</H3>
            <P>The &amp; (AND) operator compares two values, and returns a value 
            that has its bits set if, and only if, the two values being compared 
            both have their corresponding bits set. The bits are compared using 
            the following table</P><PRE>   <SPAN class=cpp-literal>1</SPAN>   &amp;   <SPAN class=cpp-literal>1</SPAN>   ==   <SPAN class=cpp-literal>1</SPAN>
   <SPAN class=cpp-literal>1</SPAN>   &amp;   <SPAN class=cpp-literal>0</SPAN>   ==   <SPAN class=cpp-literal>0</SPAN>
   <SPAN class=cpp-literal>0</SPAN>   &amp;   <SPAN class=cpp-literal>1</SPAN>   ==   <SPAN class=cpp-literal>0</SPAN>
   <SPAN class=cpp-literal>0</SPAN>   &amp;   <SPAN class=cpp-literal>0</SPAN>   ==   <SPAN class=cpp-literal>0</SPAN></PRE>
            <P>An ideal use for this is to set up a mask to check the values of 
            certain bits. Say we have a BYTE that contains some bit flags, and 
            we want to check if bit four bit is set.</P><PRE>BYTE b = <SPAN class=cpp-literal>50</SPAN>;
<SPAN class=cpp-keyword>if</SPAN> ( b &amp; <SPAN class=cpp-literal>0x10</SPAN> )
    cout &lt;&lt; "Bit four is set" &lt;&lt; endl;
<SPAN class=cpp-keyword>else</SPAN>
    cout &lt;&lt; "Bit four is clear" &lt;&lt; endl;</PRE>
            <P>This would result in the following calculation</P><PRE>    <SPAN class=cpp-literal>00110010</SPAN>  - b
  &amp; <SPAN class=cpp-literal>00010000</SPAN>  - &amp; <SPAN class=cpp-literal>0x10</SPAN>
  ----------
    <SPAN class=cpp-literal>00010000</SPAN>  - result</PRE>
            <P>So we see that bit four is set.</P>
            <H3>The | operator</H3>
            <P>The | (OR) operator compares two values, and returns a value that 
            has its bits set if one or the other values, or both, have their 
            corresponding bits set. The bits are compared using the following 
            table</P><PRE>   <SPAN class=cpp-literal>1</SPAN>   |   <SPAN class=cpp-literal>1</SPAN>   ==   <SPAN class=cpp-literal>1</SPAN>
   <SPAN class=cpp-literal>1</SPAN>   |   <SPAN class=cpp-literal>0</SPAN>   ==   <SPAN class=cpp-literal>1</SPAN>
   <SPAN class=cpp-literal>0</SPAN>   |   <SPAN class=cpp-literal>1</SPAN>   ==   <SPAN class=cpp-literal>1</SPAN>
   <SPAN class=cpp-literal>0</SPAN>   |   <SPAN class=cpp-literal>0</SPAN>   ==   <SPAN class=cpp-literal>0</SPAN></PRE>
            <P>An ideal use for this is to ensure that certain bits are set. Say 
            we want to ensure that bit three of some value is set</P><PRE>BYTE b = <SPAN class=cpp-literal>50</SPAN>;
BYTE c = b | <SPAN class=cpp-literal>0x04</SPAN>;
cout &lt;&lt; "c = " &lt;&lt; c &lt;&lt; endl;</PRE>
            <P>This would result in the following calculation</P><PRE>    <SPAN class=cpp-literal>00110010</SPAN>  - b
  | <SPAN class=cpp-literal>00000100</SPAN>  - | <SPAN class=cpp-literal>0x04</SPAN>
  ----------
    <SPAN class=cpp-literal>00110110</SPAN>  - result</PRE>
            <H3>The ^ operator</H3>
            <P>The ^ (XOR) operator compares two values, and returns a value 
            that has its bits set if one or the other value has its 
            corresponding bits set, but not both. The bits are compared using 
            the following table</P><PRE>   <SPAN class=cpp-literal>1</SPAN>   ^   <SPAN class=cpp-literal>1</SPAN>   ==   <SPAN class=cpp-literal>0</SPAN>
   <SPAN class=cpp-literal>1</SPAN>   ^   <SPAN class=cpp-literal>0</SPAN>   ==   <SPAN class=cpp-literal>1</SPAN>
   <SPAN class=cpp-literal>0</SPAN>   ^   <SPAN class=cpp-literal>1</SPAN>   ==   <SPAN class=cpp-literal>1</SPAN>
   <SPAN class=cpp-literal>0</SPAN>   ^   <SPAN class=cpp-literal>0</SPAN>   ==   <SPAN class=cpp-literal>0</SPAN></PRE>
            <P>An ideal use for this is to toggle certain bits. Say we want 
            toggle the bits three and four</P><PRE>BYTE b = <SPAN class=cpp-literal>50</SPAN>;
cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;
b = b ^ <SPAN class=cpp-literal>0x18</SPAN>;
cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;
b = b ^ <SPAN class=cpp-literal>0x18</SPAN>;
cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;</PRE>
            <P>This would result in the following calculations</P><PRE>    <SPAN class=cpp-literal>00110010</SPAN>  - b
  ^ <SPAN class=cpp-literal>00011000</SPAN>  - ^ <SPAN class=cpp-literal>0x18</SPAN>
  ----------
    <SPAN class=cpp-literal>00101010</SPAN>  - result

    <SPAN class=cpp-literal>00101010</SPAN>  - b
  ^ <SPAN class=cpp-literal>00011000</SPAN>  - ^ <SPAN class=cpp-literal>0x18</SPAN>
  ----------
    <SPAN class=cpp-literal>00110010</SPAN>  - result</PRE>
            <H3>The ~ operator</H3>
            <P>The ~ (Ones Complement or inversion) operator acts only on one 
            value and it inverts it, turning all the ones int zeros, and all the 
            zeros into ones. An ideal use of this would be to set certain bytes 
            to zero, and ensuring all other bytes are set to one, regardless of 
            the size of the data. Say we want to set all the bits to one except 
            bits zero and one</P><PRE>BYTE b = ~<SPAN class=cpp-literal>0x03</SPAN>;
cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;
WORD w = ~<SPAN class=cpp-literal>0x03</SPAN>;
cout &lt;&lt; "w = " &lt;&lt; w &lt;&lt; endl;</PRE>
            <P>This would result in the following calculations</P><PRE>    <SPAN class=cpp-literal>00000011</SPAN>  - <SPAN class=cpp-literal>0x03</SPAN>
    <SPAN class=cpp-literal>11111100</SPAN>  - ~<SPAN class=cpp-literal>0x03</SPAN>  b

    <SPAN class=cpp-literal>0000000000000011</SPAN>  - <SPAN class=cpp-literal>0x03</SPAN>
    <SPAN class=cpp-literal>1111111111111100</SPAN>  - ~<SPAN class=cpp-literal>0x03</SPAN>  w</PRE>
            <P>Another ideal use, is to combine it with the &amp; operator to 
            ensure that certain bits are set to zero. Say we want to clear bit 
            four</P><PRE>BYTE b = <SPAN class=cpp-literal>50</SPAN>;
cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;
BYTE c = b &amp; ~<SPAN class=cpp-literal>0x10</SPAN>;
cout &lt;&lt; "c = " &lt;&lt; c &lt;&lt; endl;</PRE>
            <P>This would result in the following calculations</P><PRE>    <SPAN class=cpp-literal>00110010</SPAN>  - b
  &amp; <SPAN class=cpp-literal>11101111</SPAN>  - ~<SPAN class=cpp-literal>0x10</SPAN>
  ----------
    <SPAN class=cpp-literal>00100010</SPAN>  - result</PRE>
            <H3>The &gt;&gt; and &lt;&lt; operators</H3>
            <P>The &gt;&gt; (Right shift) and &lt;&lt; (left shift) operators 
            move the bits the number of bit positions specified. The &gt;&gt; 
            operator shifts the bits from the high bit to the low bit. The 
            &lt;&lt; operator shifts the bits from the low bit to the high bit. 
            One use for these operators is to align the bits for whatever reason 
            (check out the MAKEWPARAM, HIWORD, and LOWORD macros)</P><PRE>BYTE b = <SPAN class=cpp-literal>12</SPAN>;
cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;
BYTE c = b &lt;&lt; <SPAN class=cpp-literal>2</SPAN>;
cout &lt;&lt; "c = " &lt;&lt; c &lt;&lt; endl;
c = b &gt;&gt; <SPAN class=cpp-literal>2</SPAN>;
cout &lt;&lt; "c = " &lt;&lt; c &lt;&lt; endl;</PRE>
            <P>This would result in the following calculations</P><PRE>    <SPAN class=cpp-literal>00001100</SPAN>  - b
    <SPAN class=cpp-literal>00110000</SPAN>  - b &lt;&lt; <SPAN class=cpp-literal>2</SPAN>
    <SPAN class=cpp-literal>00000011</SPAN>  - b &gt;&gt; <SPAN class=cpp-literal>2</SPAN></PRE>
            <H2>Bit Fields</H2>
            <P>Another interesting thing that can be done using bits is to have 
            bit fields. With bit fields you can set up minature structures 
            within a BYTE, WORD or DWORD. Say, for example, we want to keep 
            track of dates, but we want to use the least amount of memory as 
            possible. We could declare our structure this way</P><PRE><SPAN class=cpp-keyword>struct</SPAN> date_struct {
    BYTE day   : <SPAN class=cpp-literal>5</SPAN>,   <SPAN class=cpp-comment>// 1 to 31</SPAN>
         month : <SPAN class=cpp-literal>4</SPAN>,   <SPAN class=cpp-comment>// 1 to 12</SPAN>
         year  : <SPAN class=cpp-literal>14</SPAN>;  <SPAN class=cpp-comment>// 0 to 9999</SPAN>
    } date;</PRE>
            <P>In this example, the day field takes up the lowest 5 bits, month 
            the next four, and year the next 14 bits. So we can store the date 
            structure in twenty three bits, which is contained in three BYTEs. 
            The twenty fourth bit is ignored. If I had declared it using an 
            integer for each field, the structure would have taken up 12 
            BYTEs.</P><PRE>|<SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN>|<SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN>|<SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN> <SPAN class=cpp-literal>0</SPAN>|
  |                           |       |         |
  +------ year ---------------+ month +-- day --+</PRE>
            <P>Now lets pick this declaration apart to see what we are 
doing.</P>
            <P>First we will look at the data type we are using for the bit 
            field structure. In this case we used a BYTE. A BYTE is 8 bits, and 
            by using it, the compiler will allocate one BYTE for storage. If 
            however, we use more than 8 bits in our structure, the compiler will 
            allocate another BYTE, as many BYTEs as it takes to hold our 
            structure. If we had used a WORD or DWORD, the compiler would have 
            allocated a total of 32 bits to hold our structure.</P>
            <P>Now lets look at how the various fields are declared. First we 
            have the variable (day, month, and year), followed by a colon that 
            separates the variable from the number of bits that it contains. 
            Each bit field is separated by a comma, and the list is ended with a 
            semicolon.</P>
            <P>Now we get to the struct declaration. We put the bit fields into 
            a struct like this so that we can use convention structure accessing 
            notation to get at the structure members. Also, since we can not get 
            the addresses of bit fields, we can now use the address of the 
            structure.</P><PRE>date.day = <SPAN class=cpp-literal>12</SPAN>;

dateptr = &amp;date;
dateptr-&gt;year = <SPAN class=cpp-literal>1852</SPAN>;</PRE><!-- Article Ends --></DIV>
            <H2>PJ Arends</H2>
            <DIV style="OVERFLOW: hidden">
            <TABLE border=0>
              <TBODY>
              <TR vAlign=top>
                <TD class=smallText noWrap><IMG 
                  src="An introduction to bitwise operators-Dateien/{4846AE3C-57A0-4D4D-8AC5-723740AC3255}.jpg"><BR></TD>
                <TD class=smallText>
                  <P class=smallText>Click <A 
                  href="http://www.codeproject.com/script/profile/whos_who.asp?vt=arts&amp;id=8817">here</A> 
                  to view PJ Arends's online 
            profile.</P></TD></TR></TBODY></TABLE></DIV><BR>
            <TABLE cellPadding=0 width="100%" bgColor=#ff9900>
              <TBODY>
              <TR>
                <TD><IMG height=60 
                  src="An introduction to bitwise operators-Dateien/bannerlogo.gif" 
                  width=468 border=0></TD></TR></TBODY></TABLE>
            <H2>Discussions and Feedback</H2>
            <BLOCKQUOTE><IMG 
              src="An introduction to bitwise operators-Dateien/news_unselected.gif"> 
              <B>78 comments</B> have been posted for this article. Visit <B><A 
              href="http://www.codeproject.com/cpp/bitbashing.asp">http://www.codeproject.com/cpp/bitbashing.asp</A></B> 
              to post and view comments on this article.</BLOCKQUOTE>
            <TABLE cellSpacing=5 width="100%">
              <TBODY>
              <TR vAlign=top>
                <TD class=smallText>Updated: 9 May 2002 </TD>
                <TD class=SmallText align=right>Article content copyright PJ 
                  Arends, 2002<BR>everything else Copyright © <A 
                  href="mailto:webmaster@codeproject.com">CodeProject</A>, 
                  1999-2006</A>. 
  </TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE></TR></TBODY></TABLE></BODY></HTML>
