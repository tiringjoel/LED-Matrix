#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Feb 18, 2020 09:55:03 PM CET  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import application_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    application_support.set_Tk_var()
    top = Toplevel1 (root)
    application_support.init(root, top)
    root.protocol("WM_DELETE_WINDOW", application_support.CloseRequest)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    application_support.set_Tk_var()
    top = Toplevel1 (w)
    application_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("471x510+558+367")
        top.minsize(176, 1)
        top.maxsize(4024, 1504)
        top.resizable(1, 1)
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.bQuit = ttk.Button(top)
        self.bQuit.place(relx=0.51, rely=0.863, height=40, width=148)
        self.bQuit.configure(takefocus="")
        self.bQuit.configure(text='''Quit''')
        self.bQuit.bind('<Button-1>',lambda e:application_support.CallbackQuit(e))

        self.TLabelframe1 = ttk.Labelframe(top)
        self.TLabelframe1.place(relx=0.042, rely=0.451, relheight=0.382
                , relwidth=0.786)
        self.TLabelframe1.configure(relief='')
        self.TLabelframe1.configure(text='''Scroll''')

        self.bMoveGridLeft = ttk.Button(self.TLabelframe1)
        self.bMoveGridLeft.place(relx=0.027, rely=0.308, height=40, width=78
                , bordermode='ignore')
        self.bMoveGridLeft.configure(takefocus="")
        self.bMoveGridLeft.configure(text='''Left''')
        self.bMoveGridLeft.bind('<Button-1>',lambda e:application_support.CallbackMoveGridLeft(e))

        self.bMoveGridDown = ttk.Button(self.TLabelframe1)
        self.bMoveGridDown.place(relx=0.243, rely=0.513, height=40, width=78
                , bordermode='ignore')
        self.bMoveGridDown.configure(takefocus="")
        self.bMoveGridDown.configure(text='''Down''')
        self.bMoveGridDown.bind('<Button-1>',lambda e:application_support.CallbackMoveGridDown(e))

        self.bMoveGridRight = ttk.Button(self.TLabelframe1)
        self.bMoveGridRight.place(relx=0.459, rely=0.308, height=40, width=78
                , bordermode='ignore')
        self.bMoveGridRight.configure(takefocus="")
        self.bMoveGridRight.configure(text='''Right''')
        self.bMoveGridRight.bind('<Button-1>',lambda e:application_support.CallbackMoveGridRight(e))

        self.bMoveGridUp = ttk.Button(self.TLabelframe1)
        self.bMoveGridUp.place(relx=0.243, rely=0.103, height=40, width=78
                , bordermode='ignore')
        self.bMoveGridUp.configure(takefocus="")
        self.bMoveGridUp.configure(text='''Up''')
        self.bMoveGridUp.bind('<Button-1>',lambda e:application_support.CallbackMoveGridUp(e))

        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active', _ana2color)])
        self.CbScrollEnabled = ttk.Checkbutton(self.TLabelframe1)
        self.CbScrollEnabled.place(relx=0.027, rely=0.769, relwidth=0.362
                , relheight=0.0, height=31, bordermode='ignore')
        self.CbScrollEnabled.configure(variable=application_support.CbScrollEnabled)
        self.CbScrollEnabled.configure(takefocus="")
        self.CbScrollEnabled.configure(text='''Scroll enabled''')
        self.CbScrollEnabled.bind('<ButtonRelease-1>',lambda e:application_support.CallbackScrollChange(e))

        self.LblSpeed = ttk.Label(self.TLabelframe1)
        self.LblSpeed.place(relx=0.73, rely=0.769, height=29, width=54
                , bordermode='ignore')
        self.LblSpeed.configure(background="#d9d9d9")
        self.LblSpeed.configure(foreground="#000000")
        self.LblSpeed.configure(font="TkDefaultFont")
        self.LblSpeed.configure(relief="flat")
        self.LblSpeed.configure(text='''Speed''')

        self.LblScrollDirection = ttk.Label(self.TLabelframe1)
        self.LblScrollDirection.place(relx=0.243, rely=0.308, height=39, width=80
                , bordermode='ignore')
        self.LblScrollDirection.configure(background="#d9d9d9")
        self.LblScrollDirection.configure(foreground="#000000")
        self.LblScrollDirection.configure(font="TkDefaultFont")
        self.LblScrollDirection.configure(relief="flat")
        self.LblScrollDirection.configure(text='''Tlabel''')
        self.LblScrollDirection.configure(cursor="fleur")

        self.TLabelframe2 = ttk.Labelframe(top)
        self.TLabelframe2.place(relx=0.042, rely=0.02, relheight=0.402
                , relwidth=0.786)
        self.TLabelframe2.configure(relief='')
        self.TLabelframe2.configure(text='''Pattern''')

        self.bLoadPattern = ttk.Button(self.TLabelframe2)
        self.bLoadPattern.place(relx=0.622, rely=0.146, height=40, width=128
                , bordermode='ignore')
        self.bLoadPattern.configure(takefocus="")
        self.bLoadPattern.configure(text='''Load Pattern''')
        self.bLoadPattern.bind('<Button-1>',lambda e:application_support.CallbackLoadPattern(e))

        self.bSavePattern = ttk.Button(self.TLabelframe2)
        self.bSavePattern.place(relx=0.622, rely=0.39, height=40, width=128
                , bordermode='ignore')
        self.bSavePattern.configure(takefocus="")
        self.bSavePattern.configure(text='''Save Pattern''')
        self.bSavePattern.bind('<Button-1>',lambda e:application_support.CallbackSavePattern(e))

        self.LbPatterns = ScrolledListBox(self.TLabelframe2)
        self.LbPatterns.place(relx=0.027, rely=0.146, relheight=0.815
                , relwidth=0.527, bordermode='ignore')
        self.LbPatterns.configure(background="white")
        self.LbPatterns.configure(disabledforeground="#a3a3a3")
        self.LbPatterns.configure(font="TkFixedFont")
        self.LbPatterns.configure(foreground="black")
        self.LbPatterns.configure(highlightbackground="#d9d9d9")
        self.LbPatterns.configure(highlightcolor="#d9d9d9")
        self.LbPatterns.configure(selectbackground="#c4c4c4")
        self.LbPatterns.configure(selectforeground="black")

        self.TbPatterName = tk.Text(self.TLabelframe2)
        self.TbPatterName.place(relx=0.622, rely=0.78, relheight=0.166
                , relwidth=0.335, bordermode='ignore')
        self.TbPatterName.configure(background="white")
        self.TbPatterName.configure(font="TkTextFont")
        self.TbPatterName.configure(foreground="black")
        self.TbPatterName.configure(highlightbackground="#d9d9d9")
        self.TbPatterName.configure(highlightcolor="black")
        self.TbPatterName.configure(insertbackground="black")
        self.TbPatterName.configure(selectbackground="#c4c4c4")
        self.TbPatterName.configure(selectforeground="black")
        self.TbPatterName.configure(wrap="word")

        self.TPatternName = ttk.Label(self.TLabelframe2)
        self.TPatternName.place(relx=0.622, rely=0.634, height=29, width=112
                , bordermode='ignore')
        self.TPatternName.configure(background="#d9d9d9")
        self.TPatternName.configure(foreground="#000000")
        self.TPatternName.configure(font="TkDefaultFont")
        self.TPatternName.configure(relief="flat")
        self.TPatternName.configure(text='''Pattern Name''')

        self.ScSpeed = ttk.Scale(top, from_=0, to=1.0)
        self.ScSpeed.place(relx=0.637, rely=0.49, relwidth=0.0, relheight=0.235
                , width=26, bordermode='ignore')
        self.ScSpeed.configure(orient="vertical")
        self.ScSpeed.configure(length="120")
        self.ScSpeed.configure(takefocus="")
        self.ScSpeed.bind('<ButtonRelease-1>',lambda e:application_support.CallbackSpeedChange(e))

        self.bOpenGrid = ttk.Button(top)
        self.bOpenGrid.place(relx=0.042, rely=0.863, height=40, width=148)
        self.bOpenGrid.configure(takefocus="")
        self.bOpenGrid.configure(text='''Open Grid''')
        self.bOpenGrid.bind('<Button-1>',lambda e:application_support.CallbackOpenGrid(e))

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





