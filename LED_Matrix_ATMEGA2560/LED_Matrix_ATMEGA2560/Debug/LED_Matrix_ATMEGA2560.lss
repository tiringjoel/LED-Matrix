
LED_Matrix_ATMEGA2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000482  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000100  00800200  00800200  00000482  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000482  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001324  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e4f  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069a  00000000  00000000  000026f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00002d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000678  00000000  00000000  00002f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000701  00000000  00000000  000035b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003cb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	23 e0       	ldi	r18, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a0 30       	cpi	r26, 0x00	; 0
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	01 d1       	rcall	.+514    	; 0x308 <main>
 106:	81 c1       	rjmp	.+770    	; 0x40a <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <writeBuffer>:
// 			dst[i] = src[i];
// 		}
// 	}
// }

void writeBuffer(volatile bool _buf[ROWLENGTH][COLLENGTH]){
 10a:	2f 92       	push	r2
 10c:	3f 92       	push	r3
 10e:	4f 92       	push	r4
 110:	5f 92       	push	r5
 112:	6f 92       	push	r6
 114:	7f 92       	push	r7
 116:	8f 92       	push	r8
 118:	9f 92       	push	r9
 11a:	af 92       	push	r10
 11c:	bf 92       	push	r11
 11e:	cf 92       	push	r12
 120:	df 92       	push	r13
 122:	ef 92       	push	r14
 124:	ff 92       	push	r15
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	2a 97       	sbiw	r28, 0x0a	; 10
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
 13e:	7c 01       	movw	r14, r24
	volatile uint8_t bytetowrite;
	for (uint8_t i=0; i<NRMAX; i++)
 140:	21 2c       	mov	r2, r1
 142:	2e 82       	std	Y+6, r2	; 0x06
 144:	55 c0       	rjmp	.+170    	; 0x1f0 <writeBuffer+0xe6>
	{
		for (uint8_t j=0; j<NrColumns(buf); j++)
		{
			bytetowrite = (_buf[i*8+7][j]<<7)+(_buf[i*8+6][j]<<6)+(_buf[i*8+5][j]<<5)+(_buf[i*8+4][j]<<4)+(_buf[i*8+3][j]<<3)+(_buf[i*8+2][j]<<2)+(_buf[i*8+1][j]<<1)+(_buf[i*8+0][j]<<0);
 146:	f3 01       	movw	r30, r6
 148:	e0 0f       	add	r30, r16
 14a:	f1 1f       	adc	r31, r17
 14c:	80 81       	ld	r24, Z
 14e:	f4 01       	movw	r30, r8
 150:	e0 0f       	add	r30, r16
 152:	f1 1f       	adc	r31, r17
 154:	70 81       	ld	r23, Z
 156:	f5 01       	movw	r30, r10
 158:	e0 0f       	add	r30, r16
 15a:	f1 1f       	adc	r31, r17
 15c:	60 81       	ld	r22, Z
 15e:	ec 81       	ldd	r30, Y+4	; 0x04
 160:	fd 81       	ldd	r31, Y+5	; 0x05
 162:	e0 0f       	add	r30, r16
 164:	f1 1f       	adc	r31, r17
 166:	50 81       	ld	r21, Z
 168:	f2 01       	movw	r30, r4
 16a:	e0 0f       	add	r30, r16
 16c:	f1 1f       	adc	r31, r17
 16e:	40 81       	ld	r20, Z
 170:	f1 01       	movw	r30, r2
 172:	e0 0f       	add	r30, r16
 174:	f1 1f       	adc	r31, r17
 176:	30 81       	ld	r19, Z
 178:	f6 01       	movw	r30, r12
 17a:	e0 0f       	add	r30, r16
 17c:	f1 1f       	adc	r31, r17
 17e:	20 81       	ld	r18, Z
 180:	ea 81       	ldd	r30, Y+2	; 0x02
 182:	fb 81       	ldd	r31, Y+3	; 0x03
 184:	e0 0f       	add	r30, r16
 186:	f1 1f       	adc	r31, r17
 188:	90 81       	ld	r25, Z
 18a:	87 95       	ror	r24
 18c:	88 27       	eor	r24, r24
 18e:	87 95       	ror	r24
 190:	e0 e4       	ldi	r30, 0x40	; 64
 192:	7e 9f       	mul	r23, r30
 194:	80 0d       	add	r24, r0
 196:	11 24       	eor	r1, r1
 198:	89 0f       	add	r24, r25
 19a:	90 e2       	ldi	r25, 0x20	; 32
 19c:	69 9f       	mul	r22, r25
 19e:	80 0d       	add	r24, r0
 1a0:	11 24       	eor	r1, r1
 1a2:	e0 e1       	ldi	r30, 0x10	; 16
 1a4:	5e 9f       	mul	r21, r30
 1a6:	80 0d       	add	r24, r0
 1a8:	11 24       	eor	r1, r1
 1aa:	94 2f       	mov	r25, r20
 1ac:	99 0f       	add	r25, r25
 1ae:	99 0f       	add	r25, r25
 1b0:	99 0f       	add	r25, r25
 1b2:	89 0f       	add	r24, r25
 1b4:	93 2f       	mov	r25, r19
 1b6:	99 0f       	add	r25, r25
 1b8:	99 0f       	add	r25, r25
 1ba:	89 0f       	add	r24, r25
 1bc:	92 2f       	mov	r25, r18
 1be:	99 0f       	add	r25, r25
 1c0:	89 0f       	add	r24, r25
 1c2:	89 83       	std	Y+1, r24	; 0x01
			if (bytetowrite != 0)
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	88 23       	and	r24, r24
 1c8:	21 f0       	breq	.+8      	; 0x1d2 <writeBuffer+0xc8>
			{
				writeMax(i,reg_digit7 - j,bytetowrite);
 1ca:	49 81       	ldd	r20, Y+1	; 0x01
 1cc:	6f 2d       	mov	r22, r15
 1ce:	8e 81       	ldd	r24, Y+6	; 0x06
 1d0:	d8 d0       	rcall	.+432    	; 0x382 <writeMax>
 1d2:	fa 94       	dec	r15
 1d4:	0f 5f       	subi	r16, 0xFF	; 255
 1d6:	1f 4f       	sbci	r17, 0xFF	; 255

void writeBuffer(volatile bool _buf[ROWLENGTH][COLLENGTH]){
	volatile uint8_t bytetowrite;
	for (uint8_t i=0; i<NRMAX; i++)
	{
		for (uint8_t j=0; j<NrColumns(buf); j++)
 1d8:	f1 10       	cpse	r15, r1
 1da:	b5 cf       	rjmp	.-150    	; 0x146 <writeBuffer+0x3c>
 1dc:	e9 84       	ldd	r14, Y+9	; 0x09
 1de:	fa 84       	ldd	r15, Y+10	; 0x0a
// 	}
// }

void writeBuffer(volatile bool _buf[ROWLENGTH][COLLENGTH]){
	volatile uint8_t bytetowrite;
	for (uint8_t i=0; i<NRMAX; i++)
 1e0:	8e 81       	ldd	r24, Y+6	; 0x06
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
 1e4:	8e 83       	std	Y+6, r24	; 0x06
 1e6:	90 e4       	ldi	r25, 0x40	; 64
 1e8:	e9 0e       	add	r14, r25
 1ea:	f1 1c       	adc	r15, r1
 1ec:	84 30       	cpi	r24, 0x04	; 4
 1ee:	41 f1       	breq	.+80     	; 0x240 <writeBuffer+0x136>
 1f0:	37 01       	movw	r6, r14
 1f2:	e8 e3       	ldi	r30, 0x38	; 56
 1f4:	6e 0e       	add	r6, r30
 1f6:	71 1c       	adc	r7, r1
 1f8:	47 01       	movw	r8, r14
 1fa:	80 e3       	ldi	r24, 0x30	; 48
 1fc:	88 0e       	add	r8, r24
 1fe:	91 1c       	adc	r9, r1
 200:	57 01       	movw	r10, r14
 202:	98 e2       	ldi	r25, 0x28	; 40
 204:	a9 0e       	add	r10, r25
 206:	b1 1c       	adc	r11, r1
 208:	c7 01       	movw	r24, r14
 20a:	80 96       	adiw	r24, 0x20	; 32
 20c:	9d 83       	std	Y+5, r25	; 0x05
 20e:	8c 83       	std	Y+4, r24	; 0x04
 210:	27 01       	movw	r4, r14
 212:	98 e1       	ldi	r25, 0x18	; 24
 214:	49 0e       	add	r4, r25
 216:	51 1c       	adc	r5, r1
 218:	17 01       	movw	r2, r14
 21a:	e0 e1       	ldi	r30, 0x10	; 16
 21c:	2e 0e       	add	r2, r30
 21e:	31 1c       	adc	r3, r1
 220:	c7 01       	movw	r24, r14
 222:	08 96       	adiw	r24, 0x08	; 8
 224:	98 87       	std	Y+8, r25	; 0x08
 226:	8f 83       	std	Y+7, r24	; 0x07
	{
		for (uint8_t j=0; j<NrColumns(buf); j++)
		{
			bytetowrite = (_buf[i*8+7][j]<<7)+(_buf[i*8+6][j]<<6)+(_buf[i*8+5][j]<<5)+(_buf[i*8+4][j]<<4)+(_buf[i*8+3][j]<<3)+(_buf[i*8+2][j]<<2)+(_buf[i*8+1][j]<<1)+(_buf[i*8+0][j]<<0);
 228:	fb 82       	std	Y+3, r15	; 0x03
 22a:	ea 82       	std	Y+2, r14	; 0x02
 22c:	00 e0       	ldi	r16, 0x00	; 0
 22e:	10 e0       	ldi	r17, 0x00	; 0
 230:	68 94       	set
 232:	dd 24       	eor	r13, r13
 234:	d3 f8       	bld	r13, 3
 236:	fa 86       	std	Y+10, r15	; 0x0a
 238:	e9 86       	std	Y+9, r14	; 0x09
 23a:	fd 2c       	mov	r15, r13
 23c:	6c 01       	movw	r12, r24
 23e:	83 cf       	rjmp	.-250    	; 0x146 <writeBuffer+0x3c>
			{
				writeMax(i,reg_digit7 - j,bytetowrite);
			}
		}
	}
}
 240:	2a 96       	adiw	r28, 0x0a	; 10
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	f8 94       	cli
 246:	de bf       	out	0x3e, r29	; 62
 248:	0f be       	out	0x3f, r0	; 63
 24a:	cd bf       	out	0x3d, r28	; 61
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	ff 90       	pop	r15
 256:	ef 90       	pop	r14
 258:	df 90       	pop	r13
 25a:	cf 90       	pop	r12
 25c:	bf 90       	pop	r11
 25e:	af 90       	pop	r10
 260:	9f 90       	pop	r9
 262:	8f 90       	pop	r8
 264:	7f 90       	pop	r7
 266:	6f 90       	pop	r6
 268:	5f 90       	pop	r5
 26a:	4f 90       	pop	r4
 26c:	3f 90       	pop	r3
 26e:	2f 90       	pop	r2
 270:	08 95       	ret

00000272 <clearBuffer>:

void clearBuffer(volatile bool _buf[ROWLENGTH][COLLENGTH]){
 272:	bc 01       	movw	r22, r24
 274:	73 95       	inc	r23
 276:	0d c0       	rjmp	.+26     	; 0x292 <clearBuffer+0x20>
	for (uint8_t i=0; i<NrRows(buf); i++)
	{
		for (uint8_t j=0; j<NrColumns(buf); j++)
		{
			_buf[i][j] = false;
 278:	fa 01       	movw	r30, r20
 27a:	e2 0f       	add	r30, r18
 27c:	f3 1f       	adc	r31, r19
 27e:	10 82       	st	Z, r1
 280:	2f 5f       	subi	r18, 0xFF	; 255
 282:	3f 4f       	sbci	r19, 0xFF	; 255
}

void clearBuffer(volatile bool _buf[ROWLENGTH][COLLENGTH]){
	for (uint8_t i=0; i<NrRows(buf); i++)
	{
		for (uint8_t j=0; j<NrColumns(buf); j++)
 284:	28 30       	cpi	r18, 0x08	; 8
 286:	31 05       	cpc	r19, r1
 288:	b9 f7       	brne	.-18     	; 0x278 <clearBuffer+0x6>
 28a:	08 96       	adiw	r24, 0x08	; 8
		}
	}
}

void clearBuffer(volatile bool _buf[ROWLENGTH][COLLENGTH]){
	for (uint8_t i=0; i<NrRows(buf); i++)
 28c:	68 17       	cp	r22, r24
 28e:	79 07       	cpc	r23, r25
 290:	21 f0       	breq	.+8      	; 0x29a <clearBuffer+0x28>
	{
		for (uint8_t j=0; j<NrColumns(buf); j++)
		{
			_buf[i][j] = false;
 292:	ac 01       	movw	r20, r24
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	ef cf       	rjmp	.-34     	; 0x278 <clearBuffer+0x6>
		}
	}
	clearDisplay();
 29a:	a4 c0       	rjmp	.+328    	; 0x3e4 <clearDisplay>
 29c:	08 95       	ret

0000029e <testfncmatrix>:
}

void testfncmatrix(void){
 29e:	cf 92       	push	r12
 2a0:	df 92       	push	r13
 2a2:	ff 92       	push	r15
 2a4:	0f 93       	push	r16
 2a6:	1f 93       	push	r17
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	c1 2c       	mov	r12, r1
 2ae:	d1 2c       	mov	r13, r1
	for (uint8_t j=0; j<32; j++)
	{
		for (uint8_t i=0; i<8; i++)
		{
			clearBuffer(buf);
			buf[j][i] = true;
 2b0:	ff 24       	eor	r15, r15
 2b2:	f3 94       	inc	r15
 2b4:	15 c0       	rjmp	.+42     	; 0x2e0 <testfncmatrix+0x42>
void testfncmatrix(void){
	for (uint8_t j=0; j<32; j++)
	{
		for (uint8_t i=0; i<8; i++)
		{
			clearBuffer(buf);
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	92 e0       	ldi	r25, 0x02	; 2
 2ba:	db df       	rcall	.-74     	; 0x272 <clearBuffer>
			buf[j][i] = true;
 2bc:	f8 01       	movw	r30, r16
 2be:	ec 0f       	add	r30, r28
 2c0:	fd 1f       	adc	r31, r29
 2c2:	f0 82       	st	Z, r15
			writeBuffer(buf);
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	92 e0       	ldi	r25, 0x02	; 2
 2c8:	20 df       	rcall	.-448    	; 0x10a <writeBuffer>
 2ca:	21 96       	adiw	r28, 0x01	; 1
}

void testfncmatrix(void){
	for (uint8_t j=0; j<32; j++)
	{
		for (uint8_t i=0; i<8; i++)
 2cc:	c8 30       	cpi	r28, 0x08	; 8
 2ce:	d1 05       	cpc	r29, r1
 2d0:	91 f7       	brne	.-28     	; 0x2b6 <testfncmatrix+0x18>
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	c8 1a       	sub	r12, r24
 2d6:	d8 0a       	sbc	r13, r24
	}
	clearDisplay();
}

void testfncmatrix(void){
	for (uint8_t j=0; j<32; j++)
 2d8:	80 e2       	ldi	r24, 0x20	; 32
 2da:	c8 16       	cp	r12, r24
 2dc:	d1 04       	cpc	r13, r1
 2de:	61 f0       	breq	.+24     	; 0x2f8 <testfncmatrix+0x5a>
		}
	}
	clearDisplay();
}

void testfncmatrix(void){
 2e0:	c0 e0       	ldi	r28, 0x00	; 0
 2e2:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t j=0; j<32; j++)
	{
		for (uint8_t i=0; i<8; i++)
		{
			clearBuffer(buf);
			buf[j][i] = true;
 2e4:	86 01       	movw	r16, r12
 2e6:	00 0f       	add	r16, r16
 2e8:	11 1f       	adc	r17, r17
 2ea:	00 0f       	add	r16, r16
 2ec:	11 1f       	adc	r17, r17
 2ee:	00 0f       	add	r16, r16
 2f0:	11 1f       	adc	r17, r17
 2f2:	00 50       	subi	r16, 0x00	; 0
 2f4:	1e 4f       	sbci	r17, 0xFE	; 254
 2f6:	df cf       	rjmp	.-66     	; 0x2b6 <testfncmatrix+0x18>
			writeBuffer(buf);
		}
	}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	ff 90       	pop	r15
 302:	df 90       	pop	r13
 304:	cf 90       	pop	r12
 306:	08 95       	ret

00000308 <main>:
int main(void)
{
	//initMax();
    while (1) 
    {
		testfncmatrix();
 308:	ca df       	rcall	.-108    	; 0x29e <testfncmatrix>
 30a:	fe cf       	rjmp	.-4      	; 0x308 <main>

0000030c <shiftByte>:
#define OUTPUT		   (1)
#define digitalWrite(port, bitnr, val) {if (val) PORT(port) |= 1<<bitnr; else PORT(port) &= ~(1<<bitnr);}
#define pinMode(port, bitnr, val) {if (val) DDR(port) |= 1<<bitnr; else DDR(port) &= ~(1<<bitnr);}

static void shiftByte(uint8_t byte, uint8_t lsbfirst)
{
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	1f 92       	push	r1
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t command = FALSE;
 316:	19 82       	std	Y+1, r1	; 0x01
 318:	98 e0       	ldi	r25, 0x08	; 8
	for (uint8_t i=0; i<8; i++)
	{
		if (lsbfirst)
 31a:	66 23       	and	r22, r22
 31c:	29 f0       	breq	.+10     	; 0x328 <shiftByte+0x1c>
		{
			command = byte & 0b00000001;
 31e:	28 2f       	mov	r18, r24
 320:	21 70       	andi	r18, 0x01	; 1
 322:	29 83       	std	Y+1, r18	; 0x01
			byte = byte >> 1;
 324:	86 95       	lsr	r24
 326:	04 c0       	rjmp	.+8      	; 0x330 <shiftByte+0x24>
		}else {
			command = byte & 0b10000000;
 328:	28 2f       	mov	r18, r24
 32a:	20 78       	andi	r18, 0x80	; 128
 32c:	29 83       	std	Y+1, r18	; 0x01
			byte = byte << 1;
 32e:	88 0f       	add	r24, r24
		}
		digitalWrite(MAXPORT,DATAPIN,command);
 330:	29 81       	ldd	r18, Y+1	; 0x01
 332:	22 23       	and	r18, r18
 334:	11 f0       	breq	.+4      	; 0x33a <shiftByte+0x2e>
 336:	42 9a       	sbi	0x08, 2	; 8
 338:	01 c0       	rjmp	.+2      	; 0x33c <shiftByte+0x30>
 33a:	42 98       	cbi	0x08, 2	; 8
		digitalWrite(MAXPORT,CLKPIN,TRUE);
 33c:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33e:	00 00       	nop
		_delay_us(0.05);
		digitalWrite(MAXPORT,CLKPIN,FALSE);
 340:	40 98       	cbi	0x08, 0	; 8
 342:	00 00       	nop
 344:	91 50       	subi	r25, 0x01	; 1
#define pinMode(port, bitnr, val) {if (val) DDR(port) |= 1<<bitnr; else DDR(port) &= ~(1<<bitnr);}

static void shiftByte(uint8_t byte, uint8_t lsbfirst)
{
	volatile uint8_t command = FALSE;
	for (uint8_t i=0; i<8; i++)
 346:	49 f7       	brne	.-46     	; 0x31a <shiftByte+0xe>
		digitalWrite(MAXPORT,CLKPIN,TRUE);
		_delay_us(0.05);
		digitalWrite(MAXPORT,CLKPIN,FALSE);
		_delay_us(0.05);
	}
}
 348:	0f 90       	pop	r0
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <clearDatabus>:
static void shiftData(uint8_t address, uint8_t value){
	shiftByte(address, MSBFIRST);
	shiftByte(value, MSBFIRST);
}

static void clearDatabus(void){
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	1f 92       	push	r1
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
	for (volatile uint8_t i=0; i<NRMAX; i++)
 35a:	19 82       	std	Y+1, r1	; 0x01
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	84 30       	cpi	r24, 0x04	; 4
 360:	60 f4       	brcc	.+24     	; 0x37a <clearDatabus+0x2a>
		_delay_us(0.05);
	}
}

static void shiftData(uint8_t address, uint8_t value){
	shiftByte(address, MSBFIRST);
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	d2 df       	rcall	.-92     	; 0x30c <shiftByte>
	shiftByte(value, MSBFIRST);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	cf df       	rcall	.-98     	; 0x30c <shiftByte>
}

static void clearDatabus(void){
	for (volatile uint8_t i=0; i<NRMAX; i++)
 36e:	89 81       	ldd	r24, Y+1	; 0x01
 370:	8f 5f       	subi	r24, 0xFF	; 255
 372:	89 83       	std	Y+1, r24	; 0x01
 374:	89 81       	ldd	r24, Y+1	; 0x01
 376:	84 30       	cpi	r24, 0x04	; 4
 378:	a0 f3       	brcs	.-24     	; 0x362 <clearDatabus+0x12>
	{
		shiftData(0,0);
	}
}
 37a:	0f 90       	pop	r0
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <writeMax>:
	shiftByte(address, MSBFIRST);
	shiftByte(value, MSBFIRST);
	latchData();
}

void writeMax(uint8_t max, uint8_t address, uint8_t value){
 382:	ff 92       	push	r15
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	1f 92       	push	r1
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
 392:	18 2f       	mov	r17, r24
 394:	f6 2e       	mov	r15, r22
 396:	04 2f       	mov	r16, r20
	clearDatabus();
 398:	db df       	rcall	.-74     	; 0x350 <clearDatabus>
	volatile uint8_t counter;
	for (counter=0; counter<=max; counter++)
 39a:	19 82       	std	Y+1, r1	; 0x01
 39c:	89 81       	ldd	r24, Y+1	; 0x01
 39e:	18 17       	cp	r17, r24
 3a0:	b0 f0       	brcs	.+44     	; 0x3ce <writeMax+0x4c>
	{
		if (!counter)
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	81 11       	cpse	r24, r1
 3a6:	07 c0       	rjmp	.+14     	; 0x3b6 <writeMax+0x34>
		_delay_us(0.05);
	}
}

static void shiftData(uint8_t address, uint8_t value){
	shiftByte(address, MSBFIRST);
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	8f 2d       	mov	r24, r15
 3ac:	af df       	rcall	.-162    	; 0x30c <shiftByte>
	shiftByte(value, MSBFIRST);
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	80 2f       	mov	r24, r16
 3b2:	ac df       	rcall	.-168    	; 0x30c <shiftByte>
 3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <writeMax+0x40>
		_delay_us(0.05);
	}
}

static void shiftData(uint8_t address, uint8_t value){
	shiftByte(address, MSBFIRST);
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	a8 df       	rcall	.-176    	; 0x30c <shiftByte>
	shiftByte(value, MSBFIRST);
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	a5 df       	rcall	.-182    	; 0x30c <shiftByte>
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
}

void writeMax(uint8_t max, uint8_t address, uint8_t value){
	clearDatabus();
	volatile uint8_t counter;
	for (counter=0; counter<=max; counter++)
 3c4:	8f 5f       	subi	r24, 0xFF	; 255
 3c6:	89 83       	std	Y+1, r24	; 0x01
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	18 17       	cp	r17, r24
 3cc:	50 f7       	brcc	.-44     	; 0x3a2 <writeMax+0x20>
		shiftData(0,0);
	}
}

static void latchData(void){
	digitalWrite(MAXPORT,CSPIN,TRUE);
 3ce:	41 9a       	sbi	0x08, 1	; 8
 3d0:	00 00       	nop
	_delay_us(0.05);
	digitalWrite(MAXPORT,CSPIN,FALSE);
 3d2:	41 98       	cbi	0x08, 1	; 8
		}else{
			shiftData(0,0);
		}
	}
	latchData();
	clearDatabus();
 3d4:	bd df       	rcall	.-134    	; 0x350 <clearDatabus>
 3d6:	0f 90       	pop	r0
}
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	1f 91       	pop	r17
 3de:	0f 91       	pop	r16
 3e0:	ff 90       	pop	r15
 3e2:	08 95       	ret

000003e4 <clearDisplay>:
 3e4:	cf 93       	push	r28

void clearDisplay(void)
{
 3e6:	df 93       	push	r29
	for (uint8_t i=0; i<NRMAX; i++)
 3e8:	d0 e0       	ldi	r29, 0x00	; 0
 3ea:	0a c0       	rjmp	.+20     	; 0x400 <__LOCK_REGION_LENGTH__>
	{
		for (uint8_t j=0; j<8; j++)
		{
			writeMax(i,reg_digit0+j,0);
 3ec:	cf 5f       	subi	r28, 0xFF	; 255
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	6c 2f       	mov	r22, r28
 3f2:	8d 2f       	mov	r24, r29
 3f4:	c6 df       	rcall	.-116    	; 0x382 <writeMax>

void clearDisplay(void)
{
	for (uint8_t i=0; i<NRMAX; i++)
	{
		for (uint8_t j=0; j<8; j++)
 3f6:	c8 30       	cpi	r28, 0x08	; 8
 3f8:	c9 f7       	brne	.-14     	; 0x3ec <clearDisplay+0x8>
	clearDatabus();
}

void clearDisplay(void)
{
	for (uint8_t i=0; i<NRMAX; i++)
 3fa:	df 5f       	subi	r29, 0xFF	; 255
 3fc:	d4 30       	cpi	r29, 0x04	; 4
 3fe:	11 f0       	breq	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	latchData();
	clearDatabus();
}

void clearDisplay(void)
{
 400:	c0 e0       	ldi	r28, 0x00	; 0
 402:	f4 cf       	rjmp	.-24     	; 0x3ec <clearDisplay+0x8>
		for (uint8_t j=0; j<8; j++)
		{
			writeMax(i,reg_digit0+j,0);
		}
	}
}
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <_exit>:
 40a:	f8 94       	cli

0000040c <__stop_program>:
 40c:	ff cf       	rjmp	.-2      	; 0x40c <__stop_program>
