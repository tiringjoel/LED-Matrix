
LED_Matrix_ATMEGA2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  000001fa  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fd5  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d00  00000000  00000000  00001305  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e0  00000000  00000000  00002005  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000023e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000657  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000207  00000000  00000000  00002a97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00002c9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ef       	ldi	r30, 0xFA	; 250
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 31       	cpi	r26, 0x12	; 18
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e1       	ldi	r26, 0x12	; 18
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 31       	cpi	r26, 0x12	; 18
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	69 d0       	rcall	.+210    	; 0x1f2 <main>
 120:	6a c0       	rjmp	.+212    	; 0x1f6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <max7219ptrtest>:
	shiftByte(address, MSBFIRST);
	shiftPointerArray(value, MSBFIRST);
	latchData();
}

void max7219ptrtest(void){
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	a3 97       	sbiw	r28, 0x23	; 35
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
	bool mybuffer[] = {1,1,1,1,0,0,0,0};
 138:	28 e0       	ldi	r18, 0x08	; 8
 13a:	e0 e0       	ldi	r30, 0x00	; 0
 13c:	f2 e0       	ldi	r31, 0x02	; 2
 13e:	ce 01       	movw	r24, r28
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	dc 01       	movw	r26, r24
 144:	01 90       	ld	r0, Z+
 146:	0d 92       	st	X+, r0
 148:	2a 95       	dec	r18
 14a:	e1 f7       	brne	.-8      	; 0x144 <max7219ptrtest+0x20>
	bool mybuffer2[] = {1,0,1,0,1,0,1,0,1};
 14c:	29 e0       	ldi	r18, 0x09	; 9
 14e:	e8 e0       	ldi	r30, 0x08	; 8
 150:	f2 e0       	ldi	r31, 0x02	; 2
 152:	de 01       	movw	r26, r28
 154:	19 96       	adiw	r26, 0x09	; 9
 156:	01 90       	ld	r0, Z+
 158:	0d 92       	st	X+, r0
 15a:	2a 95       	dec	r18
 15c:	e1 f7       	brne	.-8      	; 0x156 <max7219ptrtest+0x32>
	volatile bool *myptrarr[] = {&mybuffer[0],&mybuffer2[1],0,0,0,0,0,0};
 15e:	9b 8b       	std	Y+19, r25	; 0x13
 160:	8a 8b       	std	Y+18, r24	; 0x12
 162:	09 96       	adiw	r24, 0x09	; 9
 164:	9d 8b       	std	Y+21, r25	; 0x15
 166:	8c 8b       	std	Y+20, r24	; 0x14
	// generate assignment of ptr
	for (uint8_t i=2; i<8; i++)
	{
		myptrarr[i] = &mybuffer[i];
 168:	07 97       	sbiw	r24, 0x07	; 7
 16a:	9f 8b       	std	Y+23, r25	; 0x17
 16c:	8e 8b       	std	Y+22, r24	; 0x16
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	99 8f       	std	Y+25, r25	; 0x19
 172:	88 8f       	std	Y+24, r24	; 0x18
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	9b 8f       	std	Y+27, r25	; 0x1b
 178:	8a 8f       	std	Y+26, r24	; 0x1a
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	9d 8f       	std	Y+29, r25	; 0x1d
 17e:	8c 8f       	std	Y+28, r24	; 0x1c
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	9f 8f       	std	Y+31, r25	; 0x1f
 184:	8e 8f       	std	Y+30, r24	; 0x1e
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	99 a3       	std	Y+33, r25	; 0x21
 18a:	88 a3       	std	Y+32, r24	; 0x20
#define MEDIUM			0x7
#define HIGH			0xE

static void shiftByte(uint8_t byte, uint8_t lsbfirst)
{
	volatile uint8_t command = FALSE;
 18c:	1a a2       	std	Y+34, r1	; 0x22
 18e:	88 e0       	ldi	r24, 0x08	; 8
 190:	9f ef       	ldi	r25, 0xFF	; 255
		if (lsbfirst)
		{
			command = byte & 0b00000001;
			byte = byte >> 1;
			}else {
			command = byte & 0b10000000;
 192:	29 2f       	mov	r18, r25
 194:	20 78       	andi	r18, 0x80	; 128
 196:	2a a3       	std	Y+34, r18	; 0x22
			byte = byte << 1;
 198:	99 0f       	add	r25, r25
		}
		digitalWrite(MAXPORT,DATAPIN,command);
 19a:	2a a1       	ldd	r18, Y+34	; 0x22
 19c:	22 23       	and	r18, r18
 19e:	11 f0       	breq	.+4      	; 0x1a4 <max7219ptrtest+0x80>
 1a0:	42 9a       	sbi	0x08, 2	; 8
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <max7219ptrtest+0x82>
 1a4:	42 98       	cbi	0x08, 2	; 8
		digitalWrite(MAXPORT,CLKPIN,TRUE);
 1a6:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	00 00       	nop
		_delay_us(0.05);
		digitalWrite(MAXPORT,CLKPIN,FALSE);
 1aa:	40 98       	cbi	0x08, 0	; 8
 1ac:	00 00       	nop
 1ae:	81 50       	subi	r24, 0x01	; 1
#define HIGH			0xE

static void shiftByte(uint8_t byte, uint8_t lsbfirst)
{
	volatile uint8_t command = FALSE;
	for (uint8_t i=0; i<8; i++)
 1b0:	81 f7       	brne	.-32     	; 0x192 <max7219ptrtest+0x6e>
	}
}

static void shiftPointerArray(bool **output, uint8_t lsbfirst)
{
	volatile uint8_t command = FALSE;
 1b2:	1b a2       	std	Y+35, r1	; 0x23
 1b4:	fe 01       	movw	r30, r28
 1b6:	72 96       	adiw	r30, 0x12	; 18
 1b8:	9e 01       	movw	r18, r28
 1ba:	2e 5d       	subi	r18, 0xDE	; 222
 1bc:	3f 4f       	sbci	r19, 0xFF	; 255
	for (uint8_t i=0; i<8; i++)
	{
		if (!lsbfirst)
		{
			command = *(*(output + i));
 1be:	a1 91       	ld	r26, Z+
 1c0:	b1 91       	ld	r27, Z+
 1c2:	8c 91       	ld	r24, X
 1c4:	8b a3       	std	Y+35, r24	; 0x23
			}else {
			command = *(*(output + BYTE-i));
		}
		digitalWrite(MAXPORT,DATAPIN,command);
 1c6:	8b a1       	ldd	r24, Y+35	; 0x23
 1c8:	88 23       	and	r24, r24
 1ca:	11 f0       	breq	.+4      	; 0x1d0 <max7219ptrtest+0xac>
 1cc:	42 9a       	sbi	0x08, 2	; 8
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <max7219ptrtest+0xae>
 1d0:	42 98       	cbi	0x08, 2	; 8
		digitalWrite(MAXPORT,CLKPIN,TRUE);
 1d2:	40 9a       	sbi	0x08, 0	; 8
		//_delay_us(0.05);
		digitalWrite(MAXPORT,CLKPIN,FALSE);
 1d4:	40 98       	cbi	0x08, 0	; 8
}

static void shiftPointerArray(bool **output, uint8_t lsbfirst)
{
	volatile uint8_t command = FALSE;
	for (uint8_t i=0; i<8; i++)
 1d6:	e2 17       	cp	r30, r18
 1d8:	f3 07       	cpc	r31, r19
 1da:	89 f7       	brne	.-30     	; 0x1be <max7219ptrtest+0x9a>
		//_delay_us(0.05);
	}
}

static void latchData(void){
	digitalWrite(MAXPORT,CSPIN,TRUE);
 1dc:	41 9a       	sbi	0x08, 1	; 8
	//_delay_us(0.05);
	digitalWrite(MAXPORT,CSPIN,FALSE);
 1de:	41 98       	cbi	0x08, 1	; 8
	{
		myptrarr[i] = &mybuffer[i];
	}
	//shiftPointerArray(myptrarr,MSBFIRST)
	writeRegisterbyReference(255,myptrarr);
}
 1e0:	a3 96       	adiw	r28, 0x23	; 35
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	f8 94       	cli
 1e6:	de bf       	out	0x3e, r29	; 62
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	cd bf       	out	0x3d, r28	; 61
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <main>:

bool mybuffer[ROWLENGTH][COLLENGTH];

int main(void)
{
	max7219ptrtest();
 1f2:	98 df       	rcall	.-208    	; 0x124 <max7219ptrtest>
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <main+0x2>

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
