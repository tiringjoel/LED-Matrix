
LED_Matrix_ATMEGA2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012b6  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ea9  00000000  00000000  000017c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000072c  00000000  00000000  0000266f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000178  00000000  00000000  00002d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000066e  00000000  00000000  00002f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000567  00000000  00000000  00003582  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00003ae9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	88 d0       	rcall	.+272    	; 0x206 <main>
  f6:	5c c1       	rjmp	.+696    	; 0x3b0 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <writeBuffer>:

#define NrArrayItems(array)		(sizeof(array)/sizeof(array[0]))
#define NrRows(array)			(sizeof(array)/sizeof(array[0]))
#define NrColumns(array)		(sizeof(array[0])/sizeof(array[0][0]))

void writeBuffer(bool _buf[ROWLENGTH][COLLENGTH]){
  fa:	df 92       	push	r13
  fc:	ef 92       	push	r14
  fe:	ff 92       	push	r15
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	1f 92       	push	r1
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	8c 01       	movw	r16, r24
	volatile uint8_t bytetowrite;
	for (uint8_t i=0; i<NRMAX; i++)
 110:	e1 2c       	mov	r14, r1
 112:	6b c0       	rjmp	.+214    	; 0x1ea <writeBuffer+0xf0>
	{
		for (uint8_t j=0; j<NrColumns(_buf); j++)
		{
			bytetowrite = (_buf[i*8+7][j]<<7)+(_buf[i*8+6][j]<<6)+(_buf[i*8+5][j]<<5)+(_buf[i*8+4][j]<<4)+(_buf[i*8+3][j]<<3)+(_buf[i*8+2][j]<<2)+(_buf[i*8+1][j]<<1)+(_buf[i*8+0][j]<<0);
 114:	80 e4       	ldi	r24, 0x40	; 64
 116:	e8 9e       	mul	r14, r24
 118:	90 01       	movw	r18, r0
 11a:	11 24       	eor	r1, r1
 11c:	f9 01       	movw	r30, r18
 11e:	f8 96       	adiw	r30, 0x38	; 56
 120:	e0 0f       	add	r30, r16
 122:	f1 1f       	adc	r31, r17
 124:	8f 2d       	mov	r24, r15
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	e8 0f       	add	r30, r24
 12a:	f9 1f       	adc	r31, r25
 12c:	40 81       	ld	r20, Z
 12e:	f9 01       	movw	r30, r18
 130:	f0 96       	adiw	r30, 0x30	; 48
 132:	e0 0f       	add	r30, r16
 134:	f1 1f       	adc	r31, r17
 136:	e8 0f       	add	r30, r24
 138:	f9 1f       	adc	r31, r25
 13a:	d0 80       	ld	r13, Z
 13c:	f9 01       	movw	r30, r18
 13e:	b8 96       	adiw	r30, 0x28	; 40
 140:	e0 0f       	add	r30, r16
 142:	f1 1f       	adc	r31, r17
 144:	e8 0f       	add	r30, r24
 146:	f9 1f       	adc	r31, r25
 148:	b0 81       	ld	r27, Z
 14a:	f9 01       	movw	r30, r18
 14c:	b0 96       	adiw	r30, 0x20	; 32
 14e:	e0 0f       	add	r30, r16
 150:	f1 1f       	adc	r31, r17
 152:	e8 0f       	add	r30, r24
 154:	f9 1f       	adc	r31, r25
 156:	a0 81       	ld	r26, Z
 158:	f9 01       	movw	r30, r18
 15a:	78 96       	adiw	r30, 0x18	; 24
 15c:	e0 0f       	add	r30, r16
 15e:	f1 1f       	adc	r31, r17
 160:	e8 0f       	add	r30, r24
 162:	f9 1f       	adc	r31, r25
 164:	70 81       	ld	r23, Z
 166:	f9 01       	movw	r30, r18
 168:	70 96       	adiw	r30, 0x10	; 16
 16a:	e0 0f       	add	r30, r16
 16c:	f1 1f       	adc	r31, r17
 16e:	e8 0f       	add	r30, r24
 170:	f9 1f       	adc	r31, r25
 172:	60 81       	ld	r22, Z
 174:	f9 01       	movw	r30, r18
 176:	38 96       	adiw	r30, 0x08	; 8
 178:	e0 0f       	add	r30, r16
 17a:	f1 1f       	adc	r31, r17
 17c:	e8 0f       	add	r30, r24
 17e:	f9 1f       	adc	r31, r25
 180:	50 81       	ld	r21, Z
 182:	20 0f       	add	r18, r16
 184:	31 1f       	adc	r19, r17
 186:	f9 01       	movw	r30, r18
 188:	e8 0f       	add	r30, r24
 18a:	f9 1f       	adc	r31, r25
 18c:	20 81       	ld	r18, Z
 18e:	84 2f       	mov	r24, r20
 190:	87 95       	ror	r24
 192:	88 27       	eor	r24, r24
 194:	87 95       	ror	r24
 196:	90 e4       	ldi	r25, 0x40	; 64
 198:	d9 9e       	mul	r13, r25
 19a:	80 0d       	add	r24, r0
 19c:	11 24       	eor	r1, r1
 19e:	90 e2       	ldi	r25, 0x20	; 32
 1a0:	b9 9f       	mul	r27, r25
 1a2:	80 0d       	add	r24, r0
 1a4:	11 24       	eor	r1, r1
 1a6:	90 e1       	ldi	r25, 0x10	; 16
 1a8:	a9 9f       	mul	r26, r25
 1aa:	80 0d       	add	r24, r0
 1ac:	11 24       	eor	r1, r1
 1ae:	97 2f       	mov	r25, r23
 1b0:	99 0f       	add	r25, r25
 1b2:	99 0f       	add	r25, r25
 1b4:	99 0f       	add	r25, r25
 1b6:	89 0f       	add	r24, r25
 1b8:	96 2f       	mov	r25, r22
 1ba:	99 0f       	add	r25, r25
 1bc:	99 0f       	add	r25, r25
 1be:	89 0f       	add	r24, r25
 1c0:	95 2f       	mov	r25, r21
 1c2:	99 0f       	add	r25, r25
 1c4:	89 0f       	add	r24, r25
 1c6:	82 0f       	add	r24, r18
 1c8:	89 83       	std	Y+1, r24	; 0x01
			if (bytetowrite != 0)
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	88 23       	and	r24, r24
 1ce:	29 f0       	breq	.+10     	; 0x1da <writeBuffer+0xe0>
			{
				writeMax(i,reg_digit7 - j,bytetowrite);
 1d0:	49 81       	ldd	r20, Y+1	; 0x01
 1d2:	68 e0       	ldi	r22, 0x08	; 8
 1d4:	6f 19       	sub	r22, r15
 1d6:	8e 2d       	mov	r24, r14
 1d8:	95 d0       	rcall	.+298    	; 0x304 <writeMax>

void writeBuffer(bool _buf[ROWLENGTH][COLLENGTH]){
	volatile uint8_t bytetowrite;
	for (uint8_t i=0; i<NRMAX; i++)
	{
		for (uint8_t j=0; j<NrColumns(_buf); j++)
 1da:	f3 94       	inc	r15
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <writeBuffer+0xe6>
 1de:	f1 2c       	mov	r15, r1
 1e0:	87 e0       	ldi	r24, 0x07	; 7
 1e2:	8f 15       	cp	r24, r15
 1e4:	08 f0       	brcs	.+2      	; 0x1e8 <writeBuffer+0xee>
 1e6:	96 cf       	rjmp	.-212    	; 0x114 <writeBuffer+0x1a>
#define NrRows(array)			(sizeof(array)/sizeof(array[0]))
#define NrColumns(array)		(sizeof(array[0])/sizeof(array[0][0]))

void writeBuffer(bool _buf[ROWLENGTH][COLLENGTH]){
	volatile uint8_t bytetowrite;
	for (uint8_t i=0; i<NRMAX; i++)
 1e8:	e3 94       	inc	r14
 1ea:	93 e0       	ldi	r25, 0x03	; 3
 1ec:	9e 15       	cp	r25, r14
 1ee:	b8 f7       	brcc	.-18     	; 0x1de <writeBuffer+0xe4>
			{
				writeMax(i,reg_digit7 - j,bytetowrite);
			}
		}
	}
}
 1f0:	0f 90       	pop	r0
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	df 90       	pop	r13
 200:	08 95       	ret

00000202 <clearBuffer>:
		for (uint8_t j=0; j<NrColumns(_buf); j++)
		{
			_buf[i][j] = false;
		}
	}
	clearDisplay();
 202:	a7 c0       	rjmp	.+334    	; 0x352 <clearDisplay>
 204:	08 95       	ret

00000206 <main>:
#include <stdbool.h>
#include "max7219.h"
#include "ledmatrix.h"

int main(void)
{
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
 20e:	da 95       	dec	r29
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	f8 94       	cli
 214:	de bf       	out	0x3e, r29	; 62
 216:	0f be       	out	0x3f, r0	; 63
 218:	cd bf       	out	0x3d, r28	; 61
	initMax();
 21a:	ae d0       	rcall	.+348    	; 0x378 <initMax>
	bool buf[ROWLENGTH][COLLENGTH];
    while (1) 
    {
		for (uint8_t j=0; j<32; j++)
 21c:	00 e0       	ldi	r16, 0x00	; 0
 21e:	1e c0       	rjmp	.+60     	; 0x25c <main+0x56>
		{
			for (uint8_t i=0; i<8; i++)
			{
				clearBuffer(buf);
 220:	ce 01       	movw	r24, r28
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	ee df       	rcall	.-36     	; 0x202 <clearBuffer>
				buf[j][i] = true;
 226:	e0 2f       	mov	r30, r16
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	ee 0f       	add	r30, r30
 22c:	ff 1f       	adc	r31, r31
 22e:	ee 0f       	add	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	ee 0f       	add	r30, r30
 234:	ff 1f       	adc	r31, r31
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	8c 0f       	add	r24, r28
 23c:	9d 1f       	adc	r25, r29
 23e:	e8 0f       	add	r30, r24
 240:	f9 1f       	adc	r31, r25
 242:	e1 0f       	add	r30, r17
 244:	f1 1d       	adc	r31, r1
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	80 83       	st	Z, r24
				writeBuffer(buf);
 24a:	ce 01       	movw	r24, r28
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	55 df       	rcall	.-342    	; 0xfa <writeBuffer>
	bool buf[ROWLENGTH][COLLENGTH];
    while (1) 
    {
		for (uint8_t j=0; j<32; j++)
		{
			for (uint8_t i=0; i<8; i++)
 250:	1f 5f       	subi	r17, 0xFF	; 255
 252:	01 c0       	rjmp	.+2      	; 0x256 <main+0x50>
 254:	10 e0       	ldi	r17, 0x00	; 0
 256:	18 30       	cpi	r17, 0x08	; 8
 258:	18 f3       	brcs	.-58     	; 0x220 <main+0x1a>
{
	initMax();
	bool buf[ROWLENGTH][COLLENGTH];
    while (1) 
    {
		for (uint8_t j=0; j<32; j++)
 25a:	0f 5f       	subi	r16, 0xFF	; 255
 25c:	00 32       	cpi	r16, 0x20	; 32
 25e:	d0 f3       	brcs	.-12     	; 0x254 <main+0x4e>
 260:	dd cf       	rjmp	.-70     	; 0x21c <main+0x16>

00000262 <shiftByte>:
#define digitalWrite(port, bitnr, val) {if (val) PORT(port) |= 1<<bitnr; else PORT(port) &= ~(1<<bitnr);}
#define pinMode(port, bitnr, val) {if (val) DDR(port) |= 1<<bitnr; else DDR(port) &= ~(1<<bitnr);}


static void shiftByte(uint8_t byte, uint8_t lsbfirst)
{
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	1f 92       	push	r1
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t command = FALSE;
 26c:	19 82       	std	Y+1, r1	; 0x01
	for (uint8_t i=0; i<8; i++)
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	1e c0       	rjmp	.+60     	; 0x2ae <shiftByte+0x4c>
	{
		if (lsbfirst)
 272:	66 23       	and	r22, r22
 274:	29 f0       	breq	.+10     	; 0x280 <shiftByte+0x1e>
		{
			command = byte & 0b00000001;
 276:	98 2f       	mov	r25, r24
 278:	91 70       	andi	r25, 0x01	; 1
 27a:	99 83       	std	Y+1, r25	; 0x01
			byte = byte >> 1;
 27c:	86 95       	lsr	r24
 27e:	04 c0       	rjmp	.+8      	; 0x288 <shiftByte+0x26>
		}else {
			command = byte & 0b10000000;
 280:	98 2f       	mov	r25, r24
 282:	90 78       	andi	r25, 0x80	; 128
 284:	99 83       	std	Y+1, r25	; 0x01
			byte = byte << 1;
 286:	88 0f       	add	r24, r24
		}
		digitalWrite(MAXPORT,DATAPIN,command);
 288:	99 81       	ldd	r25, Y+1	; 0x01
 28a:	99 23       	and	r25, r25
 28c:	21 f0       	breq	.+8      	; 0x296 <shiftByte+0x34>
 28e:	98 b1       	in	r25, 0x08	; 8
 290:	94 60       	ori	r25, 0x04	; 4
 292:	98 b9       	out	0x08, r25	; 8
 294:	03 c0       	rjmp	.+6      	; 0x29c <shiftByte+0x3a>
 296:	98 b1       	in	r25, 0x08	; 8
 298:	9b 7f       	andi	r25, 0xFB	; 251
 29a:	98 b9       	out	0x08, r25	; 8
		digitalWrite(MAXPORT,CLKPIN,TRUE);
 29c:	98 b1       	in	r25, 0x08	; 8
 29e:	91 60       	ori	r25, 0x01	; 1
 2a0:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a2:	00 00       	nop
		_delay_us(0.05);
		digitalWrite(MAXPORT,CLKPIN,FALSE);
 2a4:	98 b1       	in	r25, 0x08	; 8
 2a6:	9e 7f       	andi	r25, 0xFE	; 254
 2a8:	98 b9       	out	0x08, r25	; 8
 2aa:	00 00       	nop


static void shiftByte(uint8_t byte, uint8_t lsbfirst)
{
	volatile uint8_t command = FALSE;
	for (uint8_t i=0; i<8; i++)
 2ac:	2f 5f       	subi	r18, 0xFF	; 255
 2ae:	28 30       	cpi	r18, 0x08	; 8
 2b0:	00 f3       	brcs	.-64     	; 0x272 <shiftByte+0x10>
		digitalWrite(MAXPORT,CLKPIN,TRUE);
		_delay_us(0.05);
		digitalWrite(MAXPORT,CLKPIN,FALSE);
		_delay_us(0.05);
	}
}
 2b2:	0f 90       	pop	r0
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <shiftData>:

static void shiftData(uint8_t address, uint8_t value){
 2ba:	cf 93       	push	r28
 2bc:	c6 2f       	mov	r28, r22
	shiftByte(address, MSBFIRST);
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	d0 df       	rcall	.-96     	; 0x262 <shiftByte>
	shiftByte(value, MSBFIRST);
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	8c 2f       	mov	r24, r28
 2c6:	cd df       	rcall	.-102    	; 0x262 <shiftByte>
}
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <clearDatabus>:

static void clearDatabus(void){
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	1f 92       	push	r1
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
	for (volatile uint8_t i=0; i<NRMAX; i++)
 2d6:	19 82       	std	Y+1, r1	; 0x01
 2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <clearDatabus+0x1a>
	{
		shiftData(0,0);
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	ed df       	rcall	.-38     	; 0x2ba <shiftData>
	shiftByte(address, MSBFIRST);
	shiftByte(value, MSBFIRST);
}

static void clearDatabus(void){
	for (volatile uint8_t i=0; i<NRMAX; i++)
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	8f 5f       	subi	r24, 0xFF	; 255
 2e4:	89 83       	std	Y+1, r24	; 0x01
 2e6:	89 81       	ldd	r24, Y+1	; 0x01
 2e8:	84 30       	cpi	r24, 0x04	; 4
 2ea:	b8 f3       	brcs	.-18     	; 0x2da <clearDatabus+0xe>
	{
		shiftData(0,0);
	}
}
 2ec:	0f 90       	pop	r0
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <latchData>:

static void latchData(void){
	digitalWrite(MAXPORT,CSPIN,TRUE);
 2f4:	88 b1       	in	r24, 0x08	; 8
 2f6:	82 60       	ori	r24, 0x02	; 2
 2f8:	88 b9       	out	0x08, r24	; 8
 2fa:	00 00       	nop
	_delay_us(0.05);
	digitalWrite(MAXPORT,CSPIN,FALSE);
 2fc:	88 b1       	in	r24, 0x08	; 8
 2fe:	8d 7f       	andi	r24, 0xFD	; 253
 300:	88 b9       	out	0x08, r24	; 8
 302:	08 95       	ret

00000304 <writeMax>:
	shiftByte(address, MSBFIRST);
	shiftByte(value, MSBFIRST);
	latchData();
}

void writeMax(uint8_t max, uint8_t address, uint8_t value){
 304:	ff 92       	push	r15
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	1f 92       	push	r1
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
 314:	18 2f       	mov	r17, r24
 316:	f6 2e       	mov	r15, r22
 318:	04 2f       	mov	r16, r20
	clearDatabus();
 31a:	d8 df       	rcall	.-80     	; 0x2cc <clearDatabus>
	volatile uint8_t counter;
	for (counter=0; counter<=max; counter++)
 31c:	19 82       	std	Y+1, r1	; 0x01
 31e:	0d c0       	rjmp	.+26     	; 0x33a <writeMax+0x36>
	{
		if (!counter)
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	81 11       	cpse	r24, r1
 324:	04 c0       	rjmp	.+8      	; 0x32e <writeMax+0x2a>
		{
			shiftData(address,value);
 326:	60 2f       	mov	r22, r16
 328:	8f 2d       	mov	r24, r15
 32a:	c7 df       	rcall	.-114    	; 0x2ba <shiftData>
 32c:	03 c0       	rjmp	.+6      	; 0x334 <writeMax+0x30>
		}else{
			shiftData(0,0);
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	c3 df       	rcall	.-122    	; 0x2ba <shiftData>
}

void writeMax(uint8_t max, uint8_t address, uint8_t value){
	clearDatabus();
	volatile uint8_t counter;
	for (counter=0; counter<=max; counter++)
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	8f 5f       	subi	r24, 0xFF	; 255
 338:	89 83       	std	Y+1, r24	; 0x01
 33a:	89 81       	ldd	r24, Y+1	; 0x01
			shiftData(address,value);
		}else{
			shiftData(0,0);
		}
	}
	latchData();
 33c:	18 17       	cp	r17, r24
 33e:	80 f7       	brcc	.-32     	; 0x320 <writeMax+0x1c>
	clearDatabus();
 340:	d9 df       	rcall	.-78     	; 0x2f4 <latchData>
 342:	c4 df       	rcall	.-120    	; 0x2cc <clearDatabus>
}
 344:	0f 90       	pop	r0
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	0f 91       	pop	r16
 34e:	ff 90       	pop	r15
 350:	08 95       	ret

00000352 <clearDisplay>:

void clearDisplay(void)
{
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
	for (uint8_t i=0; i<NRMAX; i++)
 356:	d0 e0       	ldi	r29, 0x00	; 0
 358:	0a c0       	rjmp	.+20     	; 0x36e <clearDisplay+0x1c>
	{
		for (uint8_t j=0; j<8; j++)
		{
			writeMax(i,reg_digit0+j,0);
 35a:	cf 5f       	subi	r28, 0xFF	; 255
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	6c 2f       	mov	r22, r28
 360:	8d 2f       	mov	r24, r29
 362:	d0 df       	rcall	.-96     	; 0x304 <writeMax>
 364:	01 c0       	rjmp	.+2      	; 0x368 <clearDisplay+0x16>
 366:	c0 e0       	ldi	r28, 0x00	; 0

void clearDisplay(void)
{
	for (uint8_t i=0; i<NRMAX; i++)
	{
		for (uint8_t j=0; j<8; j++)
 368:	c8 30       	cpi	r28, 0x08	; 8
 36a:	b8 f3       	brcs	.-18     	; 0x35a <clearDisplay+0x8>
	clearDatabus();
}

void clearDisplay(void)
{
	for (uint8_t i=0; i<NRMAX; i++)
 36c:	df 5f       	subi	r29, 0xFF	; 255
 36e:	d4 30       	cpi	r29, 0x04	; 4
 370:	d0 f3       	brcs	.-12     	; 0x366 <clearDisplay+0x14>
		for (uint8_t j=0; j<8; j++)
		{
			writeMax(i,reg_digit0+j,0);
		}
	}
}
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <initMax>:

void initMax(void)
{
 378:	cf 93       	push	r28
	DDR(MAXPORT) |= (1<<CLKPIN) + (1<<DATAPIN) + (1<<CSPIN);		// Set set the DDR Register
 37a:	87 b1       	in	r24, 0x07	; 7
 37c:	87 60       	ori	r24, 0x07	; 7
 37e:	87 b9       	out	0x07, r24	; 7
	for (uint8_t i=0; i<NRMAX; i++)
 380:	c0 e0       	ldi	r28, 0x00	; 0
 382:	11 c0       	rjmp	.+34     	; 0x3a6 <initMax+0x2e>
	{
		writeMax(i,reg_displaytest,0x0);
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	6f e0       	ldi	r22, 0x0F	; 15
 388:	8c 2f       	mov	r24, r28
 38a:	bc df       	rcall	.-136    	; 0x304 <writeMax>
		writeMax(i,reg_shutdown,0x1);
 38c:	41 e0       	ldi	r20, 0x01	; 1
 38e:	6c e0       	ldi	r22, 0x0C	; 12
 390:	8c 2f       	mov	r24, r28
 392:	b8 df       	rcall	.-144    	; 0x304 <writeMax>
		writeMax(i,reg_scanlimit,0x7);
 394:	47 e0       	ldi	r20, 0x07	; 7
 396:	6b e0       	ldi	r22, 0x0B	; 11
 398:	8c 2f       	mov	r24, r28
 39a:	b4 df       	rcall	.-152    	; 0x304 <writeMax>
		writeMax(i,reg_intensity,LOW);	
 39c:	42 e0       	ldi	r20, 0x02	; 2
 39e:	6a e0       	ldi	r22, 0x0A	; 10
 3a0:	8c 2f       	mov	r24, r28
 3a2:	b0 df       	rcall	.-160    	; 0x304 <writeMax>
}

void initMax(void)
{
	DDR(MAXPORT) |= (1<<CLKPIN) + (1<<DATAPIN) + (1<<CSPIN);		// Set set the DDR Register
	for (uint8_t i=0; i<NRMAX; i++)
 3a4:	cf 5f       	subi	r28, 0xFF	; 255
 3a6:	c4 30       	cpi	r28, 0x04	; 4
 3a8:	68 f3       	brcs	.-38     	; 0x384 <initMax+0xc>
		writeMax(i,reg_displaytest,0x0);
		writeMax(i,reg_shutdown,0x1);
		writeMax(i,reg_scanlimit,0x7);
		writeMax(i,reg_intensity,LOW);	
	}
	clearDisplay();
 3aa:	d3 df       	rcall	.-90     	; 0x352 <clearDisplay>
 3ac:	cf 91       	pop	r28
}
 3ae:	08 95       	ret

000003b0 <_exit>:
 3b0:	f8 94       	cli

000003b2 <__stop_program>:
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <__stop_program>
