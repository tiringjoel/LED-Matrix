
LED_Matrix_ATMEGA2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800200  000001e0  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f43  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d22  00000000  00000000  0000128f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000388  00000000  00000000  00001fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000233c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000620  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ae  00000000  00000000  000029d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002b7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ee       	ldi	r30, 0xE0	; 224
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 34       	cpi	r26, 0x40	; 64
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e4       	ldi	r26, 0x40	; 64
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 34       	cpi	r26, 0x40	; 64
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	5c d0       	rcall	.+184    	; 0x1d8 <main>
 120:	5d c0       	rjmp	.+186    	; 0x1dc <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <writeBufferbyReference>:
	}
	latchData();
}

void writeBufferbyReference(bool buf[ROWLENGTH][COLLENGTH])
{
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	61 97       	sbiw	r28, 0x11	; 17
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	f8 94       	cli
 136:	de bf       	out	0x3e, r29	; 62
 138:	0f be       	out	0x3f, r0	; 63
 13a:	cd bf       	out	0x3d, r28	; 61
 13c:	fe 01       	movw	r30, r28
 13e:	31 96       	adiw	r30, 0x01	; 1
 140:	9e 01       	movw	r18, r28
 142:	2f 5e       	subi	r18, 0xEF	; 239
 144:	3f 4f       	sbci	r19, 0xFF	; 255
	//assign Array of Pointer to Bufferrows
	bool *Bufferadr[ROWLENGTH];
	for (uint8_t i=0; i<ROWLENGTH; i++)
	{
		Bufferadr[i] = &buf[i][0]; 
 146:	81 93       	st	Z+, r24
 148:	91 93       	st	Z+, r25
 14a:	08 96       	adiw	r24, 0x08	; 8

void writeBufferbyReference(bool buf[ROWLENGTH][COLLENGTH])
{
	//assign Array of Pointer to Bufferrows
	bool *Bufferadr[ROWLENGTH];
	for (uint8_t i=0; i<ROWLENGTH; i++)
 14c:	e2 17       	cp	r30, r18
 14e:	f3 07       	cpc	r31, r19
 150:	d1 f7       	brne	.-12     	; 0x146 <writeBufferbyReference+0x22>
 152:	8e 01       	movw	r16, r28
 154:	0d 57       	subi	r16, 0x7D	; 125
 156:	1f 4f       	sbci	r17, 0xFF	; 255
 158:	60 e0       	ldi	r22, 0x00	; 0
		Bufferadr[i] = &buf[i][0]; 
	}
	//write Data iteratively to Register
	for (uint8_t i=0; i<COLLENGTH; i++)
	{
		writeDatabyReference(reg_digit0 + i,(Bufferadr+i),8);
 15a:	6f 5f       	subi	r22, 0xFF	; 255
 15c:	a8 01       	movw	r20, r16
 15e:	40 58       	subi	r20, 0x80	; 128
 160:	51 09       	sbc	r21, r1
							{false,true,false,true,false,true,false,true},
							{true,false,true,false,true,false,true,false}	};

static void shiftByte(uint8_t byte, uint8_t lsbfirst)
{
	volatile uint8_t command = FALSE;
 162:	19 8a       	std	Y+17, r1	; 0x11
 164:	96 2f       	mov	r25, r22
 166:	88 e0       	ldi	r24, 0x08	; 8
		if (lsbfirst)
		{
			command = byte & 0b00000001;
			byte = byte >> 1;
			}else {
			command = byte & 0b10000000;
 168:	29 2f       	mov	r18, r25
 16a:	20 78       	andi	r18, 0x80	; 128
 16c:	29 8b       	std	Y+17, r18	; 0x11
			byte = byte << 1;
 16e:	99 0f       	add	r25, r25
		}
		digitalWrite(MAXPORT,DATAPIN,command);
 170:	29 89       	ldd	r18, Y+17	; 0x11
 172:	22 23       	and	r18, r18
 174:	11 f0       	breq	.+4      	; 0x17a <writeBufferbyReference+0x56>
 176:	42 9a       	sbi	0x08, 2	; 8
 178:	01 c0       	rjmp	.+2      	; 0x17c <writeBufferbyReference+0x58>
 17a:	42 98       	cbi	0x08, 2	; 8
		digitalWrite(MAXPORT,CLKPIN,TRUE);
 17c:	40 9a       	sbi	0x08, 0	; 8
		_DELAY;
		digitalWrite(MAXPORT,CLKPIN,FALSE);
 17e:	40 98       	cbi	0x08, 0	; 8
 180:	81 50       	subi	r24, 0x01	; 1
							{true,false,true,false,true,false,true,false}	};

static void shiftByte(uint8_t byte, uint8_t lsbfirst)
{
	volatile uint8_t command = FALSE;
	for (uint8_t i=0; i<8; i++)
 182:	91 f7       	brne	.-28     	; 0x168 <writeBufferbyReference+0x44>
 184:	9a 01       	movw	r18, r20
 186:	20 5f       	subi	r18, 0xF0	; 240
 188:	3f 4f       	sbci	r19, 0xFF	; 255
 18a:	f9 01       	movw	r30, r18
	{
		if (!lsbfirst)
		{
			digitalWrite(MAXPORT,DATAPIN,*(*(output + i)));
			}else {
			digitalWrite(MAXPORT,DATAPIN,*(*(output + BYTE-i)));
 18c:	b2 91       	ld	r27, -Z
 18e:	a2 91       	ld	r26, -Z
 190:	8c 91       	ld	r24, X
 192:	88 23       	and	r24, r24
 194:	11 f0       	breq	.+4      	; 0x19a <writeBufferbyReference+0x76>
 196:	42 9a       	sbi	0x08, 2	; 8
 198:	01 c0       	rjmp	.+2      	; 0x19c <writeBufferbyReference+0x78>
 19a:	42 98       	cbi	0x08, 2	; 8
		}
		digitalWrite(MAXPORT,CLKPIN,TRUE);
 19c:	40 9a       	sbi	0x08, 0	; 8
		_DELAY;
		digitalWrite(MAXPORT,CLKPIN,FALSE);
 19e:	40 98       	cbi	0x08, 0	; 8
	}
}

static void shiftPointerArray(bool **output, uint8_t lsbfirst)
{
	for (uint8_t i=0; i<8; i++)
 1a0:	e4 17       	cp	r30, r20
 1a2:	f5 07       	cpc	r31, r21
 1a4:	99 f7       	brne	.-26     	; 0x18c <writeBufferbyReference+0x68>
 1a6:	a9 01       	movw	r20, r18
	latchData();
}

static void writeDatabyReference(uint8_t address ,bool **value, uint8_t NrBytes)
{
	for (uint8_t i=0; i<NrBytes; i++)
 1a8:	20 17       	cp	r18, r16
 1aa:	31 07       	cpc	r19, r17
 1ac:	d1 f6       	brne	.-76     	; 0x162 <writeBufferbyReference+0x3e>
		_DELAY;
	}
}

static void latchData(void){
	digitalWrite(MAXPORT,CSPIN,TRUE);
 1ae:	41 9a       	sbi	0x08, 1	; 8
	_DELAY;
	digitalWrite(MAXPORT,CSPIN,FALSE);
 1b0:	41 98       	cbi	0x08, 1	; 8
 1b2:	0e 5f       	subi	r16, 0xFE	; 254
 1b4:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i=0; i<ROWLENGTH; i++)
	{
		Bufferadr[i] = &buf[i][0]; 
	}
	//write Data iteratively to Register
	for (uint8_t i=0; i<COLLENGTH; i++)
 1b6:	68 30       	cpi	r22, 0x08	; 8
 1b8:	81 f6       	brne	.-96     	; 0x15a <writeBufferbyReference+0x36>
	{
		writeDatabyReference(reg_digit0 + i,(Bufferadr+i),8);
	}
}
 1ba:	61 96       	adiw	r28, 0x11	; 17
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	f8 94       	cli
 1c0:	de bf       	out	0x3e, r29	; 62
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	cd bf       	out	0x3d, r28	; 61
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	08 95       	ret

000001d0 <max7219ptrtest>:

void max7219ptrtest(void)
{	
	writeBufferbyReference(testbuffer);						
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	92 e0       	ldi	r25, 0x02	; 2
 1d4:	a7 cf       	rjmp	.-178    	; 0x124 <writeBufferbyReference>
 1d6:	08 95       	ret

000001d8 <main>:

//bool mybuffer[ROWLENGTH][COLLENGTH];

int main(void)
{
	max7219ptrtest();
 1d8:	fb df       	rcall	.-10     	; 0x1d0 <max7219ptrtest>
 1da:	ff cf       	rjmp	.-2      	; 0x1da <main+0x2>

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
